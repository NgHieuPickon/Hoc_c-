/* X_Car */
/* Thuật toán dò đường đơn giản */

/* Chân tín hiệu của 2 cảm biến dò đường */
#define leftLineSensor 19
#define centerLineSensor 18
#define rightLineSensor 17

/* Chân nguồn điều khiển động cơ trái */
#define leftMotor1 4
#define leftMotor2 7
/* Chân PWM điều khiển tốc độ động cư trái */
#define leftPWM 5

/* Chân nguồn điều khiển động cơ phải */
#define rightMotor1 8
#define rightMotor2 9
/* Chân PWM điều khiển tốc độ động cư phải */
#define rightPWM 6

/* Chân trig của HC-SR04 */
#define trigPin 12
/* Chân echo của HC-SR04 */
#define echoPin 16

int leftValue = 1;
int centerValue = 1;
int rightValue = 1;

int preLeftValue = 0;
int preCenterValue = 0;
int preRightValue = 0;

int boost = 80;

void setup()
{
  /* Chân cảm biến nhận tín hiệu vào */
  pinMode(leftLineSensor, INPUT);
  pinMode(centerLineSensor, INPUT);
  pinMode(rightLineSensor, INPUT);

  /* Các chân điều khiển động cơ phát tín hiệu */
  pinMode(leftMotor1, OUTPUT);
  pinMode(leftMotor2, OUTPUT);
  pinMode(leftPWM, OUTPUT);

  pinMode(rightMotor1, OUTPUT);
  pinMode(rightMotor2, OUTPUT);
  pinMode(rightPWM, OUTPUT);

  /* Giao tiếp Serial với baudrate 9600 */
  Serial.begin(9600);

  /* chân trig sẽ phát tín hiệu */
  pinMode(trigPin, OUTPUT);
  /* chân echo sẽ nhận tín hiệu */
  pinMode(echoPin, INPUT);
}

void loop()
{
  /* Đọc giá trị từ cảm biến dò đường */
  int leftValue = !digitalRead(leftLineSensor);
  int centerValue = !digitalRead(centerLineSensor);
  int rightValue = !digitalRead(rightLineSensor);
  
  if(readUltrasonicSensor(trigPin, echoPin) <= 10){
    gooverObject(); 
  }
  /* Bên ngoài line */
  
  if (leftValue == 1 && centerValue == 1 && rightValue == 1)
  {
      leftValue = preLeftValue;
      centerValue = preCenterValue;
      rightValue = preCenterValue;
  }else if (leftValue == 1 && centerValue == 1 && rightValue == 1 && check){
    forward(boost-20);
  }

  /* Trường hợp cả 2 cảm biến ở vùng trắng 
   -> robot nằm đúng theo vạch */
  if (leftValue == 1 && centerValue == 0 && rightValue == 1)
  {
    /* Đi thẳng */
    forward(boost-20);
  }
  /* Trường hợp cảm biến trái ở vùng đen, cảm biến phải ở vùng trắng 
   -> robot lệch trái */
  else if (leftValue == 0 && centerValue == 1 && rightValue == 1 || leftValue == 0 && centerValue == 0 && rightValue == 1)
  {
    /* Rẽ trái */
    turnLeft(boost);
  }
  /* Trường hợp cảm biến trái ở vùng trắng, cảm biến phải ở vùng đen 
   -> robot lệch phải */
  else if (leftValue == 1 && centerValue == 1 && rightValue == 0 || leftValue == 1 && centerValue == 0 && rightValue == 0)
  {
    /* Rẽ phải */
    if(check)
      turnRight(boost);
    else
      forward(boost-20);
  }
  /* Trường hợp cả 2 cảm biến ở vùng đen 
   -> robot dừng lại */
  else if (leftValue == 0 && centerValue == 0 && rightValue == 0)
  {
    if(check)
      stop();
    else
      turnLeft(boost);
  }

  /* Lưu lại giá trị trước*/
  preLeftValue = leftValue;
  preCenterValue = centerValue;
  preRightValue = rightValue;
}

void gooverObject(){
  turnLeft(boost);
  delay(700);
  turnRight(boost);
  delay(600);
  forward(boost-20);
  delay(750);
  turnRight(boost);
  delay(600);
  forward(boost-20);
  delay(280);
  turnLeft(boost);
}

bool check(){
  forward(boost-20);
  delay(50);
  if(centerValue == 0 )
    return true;
  else
    return false; 
}
/* Hàm tiến thẳng
 * Tham số: giá trị PWM (0-255)
 * Trả về: Không */
void forward(int speed)
{
  /* Động cơ trái quay tiến */
  digitalWrite(leftMotor1, HIGH);
  digitalWrite(leftMotor2, LOW);
  /* Xung PWM điều khiển tốc độ quay */
  analogWrite(leftPWM, speed);

  /* Động cơ phải quay tiến */
  digitalWrite(rightMotor1, HIGH);
  digitalWrite(rightMotor2, LOW);
  /* Xung PWM điều khiển tốc độ quay */
  analogWrite(rightPWM, speed);
}

/* Hàm rẽ trái
 * Tham số: giá trị PWM của động cơ phải (0-255)
 * Trả về: Không */
void turnLeft(int speed)
{
  /* Động cơ trái dừng */
  digitalWrite(leftMotor1, LOW);
  digitalWrite(leftMotor2, HIGH);
  analogWrite(leftPWM, 0);

  /* Động cơ phải quay tiến */
  digitalWrite(rightMotor1, HIGH);
  digitalWrite(rightMotor2, LOW);
  analogWrite(rightPWM, speed);
}

/* Hàm rẽ phải
 * Tham số: giá trị PWM của động cơ trái (0-255)
 * Trả về: Không */
void turnRight(int speed)
{
  /* Động cơ trái quay tiến */
  digitalWrite(leftMotor1, HIGH);
  digitalWrite(leftMotor2, LOW);
  analogWrite(leftPWM, speed);

  /* Động cơ phải dừng */
  digitalWrite(rightMotor1, LOW);
  digitalWrite(rightMotor2, HIGH);
  analogWrite(rightPWM, 0);
}

void stop()
{
  /* Động cơ trái dừng */
  digitalWrite(leftMotor1, LOW);
  digitalWrite(leftMotor2, LOW);
  analogWrite(leftPWM, 0);
  /* Động cơ phải dừng */
  digitalWrite(rightMotor1, LOW);
  digitalWrite(rightMotor2, LOW);
  analogWrite(rightPWM, 0);
}
float readUltrasonicSensor(int trig, int echo)
{
  /* Biến đo thời gian */
  unsigned long duration;
  /* Biến lưu khoảng cách */
  float distance;
    
  /* Phát xung từ chân trig */
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  /* Xung có độ dài 5 microSeconds */
  delayMicroseconds(5); 
  digitalWrite(trig, LOW);
    
  /* Tính toán thời gian */
  /* Đo độ rộng xung HIGH ở chân echo */ 
  duration = pulseIn(echo, HIGH);  
  /* Tính khoảng cách đến vật */
  distance = duration/2/29.412;

  return distance;
}



